plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    id 'com.jfrog.bintray'
}

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

def libraryName = 'mangaview'
def groupIdValue = 'dev.keiji.mangaview'

def outputPath = "$buildDir/outputs/aar/${libraryName}-${version_name}.aar"

afterEvaluate {
    android.libraryVariants.forEach { variant ->
        if (variant.name == 'debug') {
            return
        }
        variant.outputs.all { output ->
            def filePath = "$buildDir/outputs/aar/${libraryName}-release.aar"
            def originalFile = file(filePath)
            def renamedFile = file(outputPath)
            tasks.named("assemble").configure {
                doLast {
                    originalFile.renameTo(renamedFile)
                }
            }
        }
    }
}

bintray {
    def propFile = project.rootProject.file('release.properties')
    if (!propFile.exists()) {
        propFile.createNewFile()
    }

    def properties = new Properties()
    properties.load(propFile.newDataInputStream())

    user = properties.getProperty("bintray.user") ?: ""
    key = properties.getProperty("bintray.api_key") ?: ""
    publications = ["bintray"]

    pkg {
        repo = 'maven'
        name = libraryName
        licenses = ['Apache-2.0']
        version version_name
        vcsUrl = 'https://github.com/keiji/mangaview'
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

tasks.withType(Javadoc).all {
    enabled = false
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}
publishing {
    publications {
        bintray(MavenPublication) {
            artifact(outputPath)
            artifact sourcesJar
            artifact javadocJar

            groupId groupIdValue
            artifactId libraryName
            version version_name
            pom {
                name = libraryName
                description = "An ImageView for reading manga(comics) for Android."
                url = "https://github.com/keiji/mangaview"
                developers {
                    developer {
                        name = "Keiji ARIYAMA"
                        email = "keiji.ariyama@gmail.com"
                    }
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
}

bintrayUpload.dependsOn assemble
